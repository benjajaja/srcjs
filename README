srcjs - Source Dedicated Server JavaScript Console Interface

Copyright 2011 Benjamin Grosse <ste3ls@gmail.com>

See "LICENSE" file for mor info.

You can start and stop a source dedicated server, watch its output, and enter input.
If node or the app crashes, the stdout/stdin connection to the server process is
lost, but you can still restart it.
It should probably work for any other game server, or program, that logs to stdout
and listens to stdin.
You also must login, with the unix pam login matching the process.

Following is an example of a good config.json file:
{
	// not actually used by srcjs, but by the defualt express server
	"port": 9009,
		
	"process": {
		// cwd of process, option to child_process.spawn
		"chdir": "../orangebox",
		
		// actual command
		"command": "./srcds_run", 
		
		// arguments to command. some programs, like "java", need each argument separated, others don't
		"arguments": ["-console", "-game hl2mp", "+map dm_lostarena", "+maxplayers 16", "-autoupdate"],
		
		// "setsid" option to child_process.spawn
		"setsid": true,
		
		// interval to send empty string to the process' stdin, zero to disable (source server need this to continue emitting stdout)
		"ioInterval": 2000,
		
		// custom stop sequence:
		// each item is executed in order.
		// if it has an "input" property, it will be sent to the process' stdin
		// if it has a "signal" property, it will be sent with pkill and then kill, reaching the entire process tree
		// if it has a "timeout" property, it will be executed after the given milliseconds since the previous entry
		"stop": [
			{"input": "say SERVER RESTART FROM CONSOLE, 3"},
			{"input": "say SERVER RESTART FROM CONSOLE, 2", "timeout": 1000},
			{"input": "say SERVER RESTART FROM CONSOLE, 1", "timeout": 1000},
			{"input": "say SERVER RESTART FROM CONSOLE, 0", "timeout": 1000},
			{"input": "quit"},
			{"signal": 9, "timeout": 2000}
		]
	},
	
	// where to store pid for recovery after exit or crash
	"pidFilename": "proc.pid"
}

Depends on socket.io, unixlib